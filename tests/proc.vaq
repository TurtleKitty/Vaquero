
; primitives

(test primitive-type (= pair.type '(lambda)))
(test primitive-view (= pair.view '(proc (xyzzy) 0xDEADBEEF)))
(test primitive-code (= pair.code '0xDEADBEEF))
(test primitive-true (= pair.to-bool true))
(test primitive-env (= pair.env 'global))
(test primitive-arity (= pair.arity 2))
(test primitive-variadic (= +.arity '*))
(test primitive-apply (= (+.apply '(1 2 3) null) 6))

; procedures

(def foo 
   (proc (x y)
      (if opt.z
         (+ x y opt.z)
         (+ x y))))

(test proc-type (= foo.type '(proc lambda)))
(test proc-view (= foo.view %(proc (x y) $(send "..." 'to-symbol))))
(test proc-code (= foo.code '(proc (x y) (if opt.z (+ x y opt.z) (+ x y)))))
(test proc-true (= foo.to-bool true))
(test proc-arity (= foo.arity 2))
(test proc-opt   (= 6 (foo 1 z: 3 2)))
(test proc-apply (= 3 (foo.apply '(1 2))))
(test proc-apply-opt (= 6 (foo.apply '(1 2) opt: (: z 3))))

(test proc-env 
   (wall ()
      (def bar (lambda () null))
      (is? bar.env env)))

